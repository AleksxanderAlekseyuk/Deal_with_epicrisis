{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Копия блокнота \"Fbrngn.ipynb\"",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/AlexAlexeyuk/Deal_with_epicrisis/blob/main/main/coagulogram/fibrinogen_plus_crp\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wps7OwH9itIC"
      },
      "source": [
        "from re import sub, search, findall\n",
        "import os\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from glob import glob"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_vbWIxj6ZmpZ"
      },
      "source": [
        "lst = list(glob(os.path.join('/content/drive/MyDrive/unzipped_and_converted', '*')))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "To2ci7erZpFq"
      },
      "source": [
        "lst = lst[:20]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LIyOR_wkZVpQ"
      },
      "source": [
        "def remover(file_):\n",
        "    file_ = ''.join(file_.split()).lower()\n",
        "    stop_element = [',|от|менее|<|>|автоматическая|ручная|[()]'\n",
        "              '|меньше|меньшн|больше|более|менее|iultra|от']\n",
        "    for elem in stop_element:\n",
        "      if elem == ',':\n",
        "        file_ = sub(elem, '.', file_)\n",
        "      else:\n",
        "        file_ = sub(elem, '', file_)\n",
        "    return(file_)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PmImbWwtci0e"
      },
      "source": [
        "def change_date_format(dt):\n",
        "    \"\"\" на первом этапе переводим \"нормальный формат\" в формат через дефисы\n",
        "     на втором этапе ищем вариант дд.мм.гг в формат через дефисы\"\"\"\n",
        "    data_1 =  sub(r'(0?[1-9]|[12]\\d|30|31)[.](0?[1-9]|1[0-2])[.](\\d{4})', \n",
        "                     '\\\\1-\\\\2-\\\\3', dt)\n",
        "    return sub(r'(0?[1-9]|[12]\\d|30|31)[.](0?[1-9]|1[0-2])[.](\\d{2})', \n",
        "                  '\\\\1-\\\\2-20\\\\3', data_1)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Twu5wNcLbQJS"
      },
      "source": [
        "class DataExtractor:\n",
        "    def __init__(self, list_of_epicrisis, test_dates = [], values = [], \n",
        "                 patients_id = [], patients_birthday = [], data_dct = {}):\n",
        "        self.list_of_epicrisis = list_of_epicrisis\n",
        "        self.test_dates = test_dates\n",
        "        self.values = values\n",
        "        self.patients_id = patients_id\n",
        "        self.patients_birthday = patients_birthday\n",
        "        self.data_dct = data_dct\n",
        "   \n",
        "        \n",
        "    def fibrinogen(self):\n",
        "        \"\"\"fibrinogen\n",
        "\n",
        "        params:\n",
        "            list_of_epicrisis - list of txt files \n",
        "            test_dates - dates of fibrinogen test\n",
        "            values - fibrinogen values\n",
        "            patients_id - # case report\n",
        "            patients_birthday\n",
        "\n",
        "        returns:\n",
        "            dataframe contains fibrinogen data\n",
        "        \"\"\"\n",
        "        for doc in self.list_of_epicrisis:\n",
        "          with open(doc, encoding='utf-8', errors='ignore') as file_:\n",
        "            file_ = change_date_format(remover(file_.read()))\n",
        "            file_ = sub(r'(\\d{2}-\\d{2}-\\d{4})(гемостазиограмма)', r'\\2\\1', file_) #ставим дату после гемостазиограммы, чтобы проще было искать по одному шаблону.\n",
        "            for date in findall(r'(?<=гемостазиограмма)(\\d{2}-\\d{2}-\\d{4}|)', file_): #поиск дат, которые идут после гемост-ы.\n",
        "              self.test_dates.append(date)\n",
        "              id = search(r'\\d+', file_) #ищем айди. находит самую первую дату в эпикризе. !!! есть эпикризы в которых первые цифры это номер отделения, типа онко отд. №2\n",
        "              if id:\n",
        "                    self.patients_id.append(id[0])\n",
        "              birthday = search(\"(\\d{2})-(\\d{2})-(\\d{4})\", file_)\n",
        "              if birthday:\n",
        "                    self.patients_birthday.append(birthday[0])\n",
        "            file_1 = sub(r'(гемостазиограмма)(\\d{2}-\\d{2}-\\d{4})', r'\\2\\1', file_) #здесь наоборот ставим дату ПЕРЕД гемост-ой, чтобы она нам не мешала. тк вариант типа \"гемостазиограмма27-09-2021:ачтв..\" не даст результата.\n",
        "            for value in findall(r'(гемостазиограмма.*?)(?=\\d{2}-\\d{2}-\\d{4})', file_1): #задаем поиск строки от гемост-ы до даты другого исследования, при этом НЕ захватываются данные других иссл-ий.\n",
        "              value = sub(r'(.*)(фибриноген)(\\d.\\d*)', r'\\3\\2\\1', value) #в найденной строке меняем местами необходимые данные. новая строка имеет вид: 4,66фибриногенгемостазиограмма:ачтв24мно1,20...\n",
        "              value = sub(r'(фибриноген|гемостазиограмма).*', '', value)\n",
        "              if value: #удаляем все, что после фибриногена и/или гемост-ы включительно, оставляя лишь число. если его нет - пустая строка.\n",
        "                  self.values.append(value)\n",
        "              else:\n",
        "                  self.values.append('NaN') #удаляем все, что после фибриногена и/или гемост-ы включительно, оставляя лишь число. если его нет - пустая строка.\n",
        "               # а здесь почему-то не могу применить float/np.float. хотя во всем числах запятые заменены на точки. пишет - ValueError: could not convert string to float: \n",
        "        self.data_dct = {'ID':self.patients_id, 'Birthday':self.patients_birthday, 'dates':self.test_dates,'values':self.values}\n",
        "        df = pd.DataFrame(self.data_dct)\n",
        "        df = df.replace(r'', np.nan, regex=True)\n",
        "        return(df)\n",
        "    \n",
        "    \n",
        "    \n",
        "    \n",
        "    def C_reactive_protein(self):\n",
        "        \"\"\"C_reactive_protein\n",
        "\n",
        "            params:\n",
        "                list_of_epicrisis - list of txt files \n",
        "                test_dates - dates of fibrinogen test\n",
        "                values - fibrinogen values\n",
        "                patients_id - # case report\n",
        "                patients_birthday\n",
        "\n",
        "            returns:\n",
        "                dataframe contains C_reactive_protein data\n",
        "        \"\"\"\n",
        "        for doc in self.list_of_epicrisis:\n",
        "          with open(doc, encoding='utf-8', errors='ignore') as file_:\n",
        "            file_ = change_date_format(remover(file_.read()))\n",
        "            file_ = sub(r'(\\d{2}-\\d{2}-\\d{4})(биохимическоеисследованиекрови)', r'\\2\\1', file_) #ставим дату после гемостазиограммы, чтобы проще было искать по одному шаблону.\n",
        "            for date in findall(r'(?<=биохимическоеисследованиекрови)(\\d{2}-\\d{2}-\\d{4}|)', file_): #поиск дат, которые идут после гемост-ы.\n",
        "              self.test_dates.append(date)\n",
        "              id = search(r'\\d+', file_) #ищем айди. находит самую первую дату в эпикризе. !!! есть эпикризы в которых первые цифры это номер отделения, типа онко отд. №2\n",
        "              if id:\n",
        "                    self.patients_id.append(id[0])\n",
        "              birthday = search(\"(\\d{2})-(\\d{2})-(\\d{4})\", file_)\n",
        "              if birthday:\n",
        "                    self.patients_birthday.append(birthday[0])\n",
        "            file_1 = sub(r'(биохимическоеисследованиекрови)(\\d{2}-\\d{2}-\\d{4})', r'\\2\\1', file_) #здесь наоборот ставим дату ПЕРЕД гемост-ой, чтобы она нам не мешала. тк вариант типа \"гемостазиограмма27-09-2021:ачтв..\" не даст результата.\n",
        "            for value in findall(r'(биохимическоеисследованиекрови.*?)(?=\\d{2}-\\d{2}-\\d{4})', file_1): #задаем поиск строки от гемост-ы до даты другого исследования, при этом НЕ захватываются данные других иссл-ий.\n",
        "              value = sub(r'(.*)(.-реактивныйбелок)(\\d.\\d*)', r'\\3\\2\\1', value) #в найденной строке меняем местами необходимые данные. новая строка имеет вид: 4,66фибриногенгемостазиограмма:ачтв24мно1,20...\n",
        "              value = sub(r'(.-реактивныйбелок|биохимическоеисследованиекрови).*', '', value)\n",
        "              if value: #удаляем все, что после фибриногена и/или гемост-ы включительно, оставляя лишь число. если его нет - пустая строка.\n",
        "                  self.values.append(value)\n",
        "              else:\n",
        "                  self.values.append('NaN') #удаляем все, что после фибриногена и/или гемост-ы включительно, оставляя лишь число. если его нет - пустая строка.\n",
        "               # а здесь почему-то не могу применить float/np.float. хотя во всем числах запятые заменены на точки. пишет - ValueError: could not convert string to float: \n",
        "        self.data_dct = {'ID':self.patients_id, 'Birthday':self.patients_birthday, 'dates':self.test_dates,'values':self.values}\n",
        "        df = pd.DataFrame(self.data_dct)\n",
        "        df = df.replace(r'', np.nan, regex=True)\n",
        "        return(df)\n",
        "        "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IUCAjVcfadbw"
      },
      "source": [
        "i = DataExtractor(list_of_epicrisis=lst) # таким образом происходит инициализация класса, сразу передаём список файлов, чтобы не надо было повторяться несколько раз\n",
        "i.C_reactive_protein() # вызов интересующей функции через точку ( передавать аргументы не надо, т.к. список уже был передан\n"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "_tHKf6FJhjqO",
        "outputId": "c098d287-b254-46eb-fac3-ec1e5f2a0df1"
      },
      "source": [
        "data_dct = {'ID':id_list, 'dates':dates,'values':values}\n",
        "df = pd.DataFrame(data_dct)\n",
        "df.replace(r'', np.nan, regex=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>dates</th>\n",
              "      <th>values</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2839</td>\n",
              "      <td>29-06-2020</td>\n",
              "      <td>7.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2839</td>\n",
              "      <td>06-07-2020</td>\n",
              "      <td>5.31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2839</td>\n",
              "      <td>08-07-2020</td>\n",
              "      <td>5.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2839</td>\n",
              "      <td>14-07-2020</td>\n",
              "      <td>3.69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2839</td>\n",
              "      <td>17-07-2020</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>177</th>\n",
              "      <td>2940</td>\n",
              "      <td>23-07-2020</td>\n",
              "      <td>5.1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>178</th>\n",
              "      <td>3535</td>\n",
              "      <td>07-09-2020</td>\n",
              "      <td>2.34</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>179</th>\n",
              "      <td>3535</td>\n",
              "      <td>10-09-2020</td>\n",
              "      <td>6.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>180</th>\n",
              "      <td>3535</td>\n",
              "      <td>14-09-2020</td>\n",
              "      <td>6.6</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>181</th>\n",
              "      <td>4710</td>\n",
              "      <td>10-11-2020</td>\n",
              "      <td>5.84</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>182 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "       ID       dates values\n",
              "0    2839  29-06-2020   7.64\n",
              "1    2839  06-07-2020   5.31\n",
              "2    2839  08-07-2020   5.56\n",
              "3    2839  14-07-2020   3.69\n",
              "4    2839  17-07-2020    NaN\n",
              "..    ...         ...    ...\n",
              "177  2940  23-07-2020    5.1\n",
              "178  3535  07-09-2020   2.34\n",
              "179  3535  10-09-2020   6.16\n",
              "180  3535  14-09-2020    6.6\n",
              "181  4710  10-11-2020   5.84\n",
              "\n",
              "[182 rows x 3 columns]"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aMzL_h9Z20To"
      },
      "source": [
        "df.to_csv('data.csv')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MpaSEfZhdp3s"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}